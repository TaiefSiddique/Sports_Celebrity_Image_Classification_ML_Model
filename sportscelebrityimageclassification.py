# -*- coding: utf-8 -*-
"""SportsCelebrityImageClassification.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rQVbqUDVRZ7H7-kp2jSYhTzWqeeUPKT7
"""

import os
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import tensorflow as tf
from tensorflow import keras
from keras.layers import Dense, Flatten, Conv2D, MaxPooling2D , Dropout , BatchNormalization
from keras.models import Sequential
import tensorflow_hub as hub
from PIL import Image
import cv2
import matplotlib.image as mpimg
from sklearn.metrics import classification_report , confusion_matrix , accuracy_score , auc
from sklearn.model_selection import train_test_split
import warnings
warnings.filterwarnings("ignore")

image_path_folder = "/content/drive/MyDrive/datasets/Sports-celebrity images"
class_labels = os.listdir(image_path_folder)
class_labels

class_labels = {'Kane Williamson':0, 'Ronaldo':1, 'Maria Sharapova':2, 'Kobe Bryant':3}
class_labels['Kane Williamson']

image_data = []
label_data = []
for folder in os.listdir(image_path_folder):
    path = os.path.join(image_path_folder,folder)
    for img in os.listdir(path):
        image = Image.open(path+"/"+img)
        image = image.resize((224,224))
        image = np.array(image)
        image_data.append(image)
        label_data.append(class_labels[folder])

print(len(image_data))
print(len(label_data))

x = np.array(image_data)
y = np.array(label_data)

x_train, x_test ,y_train, y_test = train_test_split(x ,y , test_size=0.10, shuffle=True)
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)

x_train_scaled = x_train/255
x_test_scaled = x_test/255

list_labels = ['Kane Williamson', 'Ronaldo', 'Maria Sharapova', 'Kobe Bryant']

plt.figure(figsize=(30,50))

for i in range(60):
    plt.subplot(10,6,i+1)
    plt.imshow(x_train[i])
    plt.title(f"Label:{list_labels[y_train[i]]}")
    plt.axis("off")

class_labels
data_augmentation = tf.keras.Sequential([
    tf.keras.layers.experimental.preprocessing.RandomContrast(0.3),
    tf.keras.layers.experimental.preprocessing.RandomFlip('horizontal_and_vertical'),
    tf.keras.layers.experimental.preprocessing.RandomZoom(0.3),
    tf.keras.layers.experimental.preprocessing.RandomRotation(0.2)
])

import tensorflow_hub as hub
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout, BatchNormalization

# URL to the MobileNetV2 model on TensorFlow Hub
url = "https://tfhub.dev/google/tf2-preview/mobilenet_v2/classification/4"

# Load the model from TensorFlow Hub
model_hub = hub.KerasLayer(url, input_shape=(224, 224, 3), trainable=False)

num_class = 4
model = Sequential()
model.add(model_hub)
model.add(Dense(800, activation='relu'))
model.add(Dropout(0.3))
model.add(BatchNormalization())
model.add(Dense(units=num_class, activation="softmax"))

model.compile(optimizer="adam", loss="sparse_categorical_crossentropy", metrics=["accuracy"])

model.summary()

history = model.fit(x_train_scaled, y_train, batch_size=64 ,epochs=5,
                validation_data=(x_test_scaled,y_test)
                   )

loss,acc = model.evaluate(x_train_scaled,y_train)
print("Loss on Train data:",loss)
print("Accuracy on Train data:",acc)

loss1,acc1 = model.evaluate(x_test_scaled, y_test)

print("Loss on Test data:",loss1)
print("Accuracy on Test data:",acc1)

acc = history.history["accuracy"]
val_acc = history.history["val_accuracy"]

loss = history.history["loss"]
val_loss = history.history["val_loss"]

EPOCHS=5
plt.figure(figsize=(12,6))
plt.subplot(1,2,1)
plt.plot(range(EPOCHS),acc, label="Training Accuracy")
plt.plot(range(EPOCHS),val_acc, label="Validation Accuracy")
plt.legend(loc="lower right")
plt.title("Training and Validation Accuracy")

#plt.figure(figsize=(6,6))
plt.subplot(1,2,2)
plt.plot(range(EPOCHS),loss, label="Training Loss")
plt.plot(range(EPOCHS),val_loss, label="Validation Loss")
plt.legend(loc="lower right")
plt.title("Training and Validation Loss")
plt.show()

y_pred = model.predict(x_test_scaled)
y_pred = [np.argmax(i) for i in y_pred]

print("Confusion Matrix:\n",confusion_matrix(y_test,y_pred))
print()
print("Classification Report:",classification_report(y_test,y_pred))

plt.figure(figsize=(30,40))
for i in range(45):
    plt.subplot(8,6,i+1)
    plt.imshow(x_test[i])
    plt.title(f"Act Label:{list_labels[y_test[i]]}\nPred Label:{list_labels[y_pred[i]]}")
    plt.axis("off")

